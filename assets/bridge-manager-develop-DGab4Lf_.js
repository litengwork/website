import{b as r}from"./index-Dqaun2kX.js";var E=(s=>(s[s.CB_RET_ERR_GENERAL=1]="CB_RET_ERR_GENERAL",s[s.CB_RET_ERR_BAD_LOGIN_INFO=2]="CB_RET_ERR_BAD_LOGIN_INFO",s[s.CB_RET_ERR_PARAM=3]="CB_RET_ERR_PARAM",s[s.CB_RET_ERR_MULTI_EXEC=4]="CB_RET_ERR_MULTI_EXEC",s[s.CB_RET_ERR_INOPERABLE=5]="CB_RET_ERR_INOPERABLE",s[s.CB_RET_ERR_KEY_NOT_EXIST=6]="CB_RET_ERR_KEY_NOT_EXIST",s[s.CB_RET_ERR_BIZPICO=20]="CB_RET_ERR_BIZPICO",s[s.CB_RET_ERR_NOT_AVAILABLE=80]="CB_RET_ERR_NOT_AVAILABLE",s[s.CB_RET_ERR_USER_CANCEL=90]="CB_RET_ERR_USER_CANCEL",s))(E||{});function d(s){try{const e=Object.values(E).find(i=>i===s);return e!==void 0?e:null}catch(e){return r.error(`Get Bridge Response Error Type is Error. ForErrorCode: ${s}`,e),null}}function R(s){if(s===null)return null;switch(s){case 1:return"一般エラー";case 2:return"ログイン情報不正";case 3:return"パラメータ不正";case 4:return"多重実行";case 5:return"操作不可";case 6:return"指定したKEYが存在しない";case 20:return"BIZPICO APIで失敗";case 80:return"利用不可";case 90:return"ユーザーキャンセル"}}const n={errorCode:-1,errorDescription:"予期せぬエラー",errorType:null};function S(s){if(s==null||typeof s!="object")return null;try{return s}catch{return null}}function _(s){if(s==null||typeof s!="object")return r.log("ParseBridgeSuccessResponse. Object is empty."),null;try{const e=s;return r.log("ParseBridgeSuccessResponse is done."),e}catch(e){return r.error(`ParseBridgeSuccessResponse is unexpected. Error: ${e} .`),null}}function c(s){if(s==null||typeof s!="object")return r.log("ParseBridgeFailureError. Object is Empty."),null;try{const e=s;if(e!==null&&typeof e=="object"&&e.errorCode!==null&&e.errorCode!==void 0){const i=d(e.errorCode),o=R(i),t={...e,errorType:i,errorDescription:o};return r.log("ParseBridgeFailureError is done."),t}return r.error("ParseBridgeFailureError. Error Code is empty."),null}catch(e){return r.error(`ParseBridgeFailureError is unexpected. Error: ${e} .`),null}}var l=(s=>(s.GET_INFORMATION="getInformation",s.GET_ONE_TIME_CODE="getOneTimeCode",s.READ_MY_NUMBER="readMyNumber",s.CANCEL_READING_MY_NUMBER="cancelReadingMyNumber",s.SET_SCREEN_BRIGHTNESS="setScreenBrightness",s.GET_SCREEN_BRIGHTNESS="getScreenBrightness",s.REGIST_DISPLAY_STATUS_NOTIFICATION="registDisplayStatusNotification",s.SCAN_QR_CODE="scanQRCode",s.CONFIRM_QR_CODE="confirmQRCode",s.PLAY_PAYMENT_SOUND="playPaymentSound",s.SET_STORAGE_DATA="setStorageData",s.GET_STORAGE_DATA="getStorageData",s.REMOVE_STORAGE_DATA="removeStorageData",s.LAUNCH_EXTERNAL_BROWSER="launchExternalBrowser",s.CLOSE_PAYMENT_WEBVIEW="closePaymentWebView",s.LAUNCH_OTHER_WEBVIEW="launchOtherWebView",s.CLOSE_OTHER_WEBVIEW="closeOtherWebView",s.GET_IMAGE_FROM_ALBUM="getImageFromAlbum",s.FINISH_INITIAL_LOAD="finishInitialLoad",s.TRANSITION_PAGE="transitionPage",s))(l||{});class y{_toString(e){try{return JSON.stringify(e)}catch{return e}}get environment(){return"DEV"}async getInformation(e){const i=l.GET_INFORMATION;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{const o=await window.Suica.getInformation(e),t=_(o);return t===null?(r.error(`GetInformation is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(r.log(`GetInformation is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return r.error(`GetInformation is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async getOneTimeCode(e){const i=l.GET_ONE_TIME_CODE;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{const o=await window.Suica.getOneTimeCode(e),t=_(o);return t===null?(r.error(`GetOneTimeCode is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(r.log(`GetOneTimeCode is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return r.error(`GetOneTimeCode is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async readMyNumber(e,i){const o=l.READ_MY_NUMBER;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${o}`);const t=u=>{const a=S(u);a===null?r.error("ReadMyNumber#onStateChangedReadMyNumber Invalid Progress Data."):(r.log(`ReadMyNumber#onStateChangedReadMyNumber is parsed. parsedStatus: ${this._toString(a)}`),i(a))};try{const u=await window.Suica.readMyNumber({loginInfo:e.loginInfo,password:e.password,onStateChangedReadMyNumber:t}),a=_(u);return a===null?(r.error(`ReadMyNumber is unexpected. result: ${this._toString(a)}, resultJsonObject: ${this._toString(u)} .`),Promise.reject(n)):(r.log(`ReadMyNumber is successful. result: ${this._toString(a)}`),Promise.resolve(a))}catch(u){const a=c(u);return r.error(`ReadMyNumber is failure. error: ${u}, parsedError: ${this._toString(a)} .`),Promise.reject(a??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${o}, Finally .`)}}async cancelReadingMyNumber(e){const i=l.CANCEL_READING_MY_NUMBER;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{return await window.Suica.cancelReadingMyNumber(e),r.log("CancelReadingMyNumber is successful."),Promise.resolve(null)}catch(o){const t=c(o);return r.error(`CancelReadingMyNumber is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async setScreenBrightness(e){const i=l.SET_SCREEN_BRIGHTNESS;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{return await window.Suica.setScreenBrightness(e),r.log("SetScreenBrightness is successful."),Promise.resolve(null)}catch(o){const t=c(o);return r.error(`SetScreenBrightness is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async getScreenBrightness(e){const i=l.GET_SCREEN_BRIGHTNESS;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{const o=await window.Suica.getScreenBrightness(e),t=_(o);return t===null?(r.error(`GetScreenBrightness is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(r.log(`GetScreenBrightness is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return r.error(`GetScreenBrightness is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async registDisplayStatusNotification(e,i){const o=l.REGIST_DISPLAY_STATUS_NOTIFICATION;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${o}`);const t=u=>{const a=S(u);a===null?r.error("RegistDisplayStatusNotification#onNotifyDisplayStatus Invalid Status Data."):(r.log(`RegistDisplayStatusNotification#onNotifyDisplayStatus is parsed. parsedStatus: ${this._toString(a)}`),i==null||i(a))};try{return await window.Suica.registDisplayStatusNotification({loginInfo:e.loginInfo,onNotifyDisplayStatus:i===null?null:t}),r.log("RegistDisplayStatusNotification is successful."),Promise.resolve(null)}catch(u){const a=c(u);return r.error(`RegistDisplayStatusNotification is failure. error: ${u}, parsedError: ${this._toString(a)} .`),Promise.reject(a??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${o}, Finally .`)}}async scanQRCode(e){const i=l.SCAN_QR_CODE;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{const o=await window.Suica.scanQRCode(e),t=_(o);return t===null?(r.error(`ScanQRCode is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(r.log(`ScanQRCode is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return r.error(`ScanQRCode is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}confirmQRCode(e){const i=l.CONFIRM_QR_CODE;r.log(`Bridge Develop API Type: ${i}`);const o=t=>{const u=(()=>{try{const g=t;return g.value!==null&&g.value!==void 0&&g.type!==null&&g.type!==void 0?g:null}catch(g){return r.error(`ConfirmQRCode#codeDataFromNative is unexpected. error: ${g}, data: ${this._toString(t)} .`),null}})();if(u===null)return r.error(`ConfirmQRCode#codeDataFromNative is null. Because invalid data. data: ${this._toString(t)} .`),Promise.reject();const a=e(u);return r.log(`ConfirmQRCode#Callback. result is ${this._toString(a)}, data: ${this._toString(t)} .`),Promise.resolve(a)};try{window.Suica.nriConfirmFunction=o}catch(t){r.error(`ConfirmQRCode is unexpected. error: ${t} .`)}finally{r.log(`Bridge Develop, API Type: ${i}, Finally .`)}}playPaymentSound(e){const i=l.PLAY_PAYMENT_SOUND;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{window.Suica.playPaymentSound(e)}catch(o){r.error(`PlayPaymentSound is unexpected. error: ${o} .`)}finally{r.log(`Bridge Develop, API Type: ${i}, Finally .`)}}async setStorageData(e){const i=l.SET_STORAGE_DATA;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{return await window.Suica.setStorageData(e),r.log("SetStorageData is successful."),Promise.resolve(null)}catch(o){const t=c(o);return r.error(`SetStorageData is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async getStorageData(e){const i=l.GET_STORAGE_DATA;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{const o=await window.Suica.getStorageData(e),t=_(o);return t===null?(r.error(`GetStorageData is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(r.log(`GetStorageData is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return r.error(`GetStorageData is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async removeStorageData(e){const i=l.REMOVE_STORAGE_DATA;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{return await window.Suica.removeStorageData(e),r.log("RemoveStorageData is successful."),Promise.resolve(null)}catch(o){const t=c(o);return r.error(`RemoveStorageData is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async launchExternalBrowser(e){const i=l.LAUNCH_EXTERNAL_BROWSER;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{return await window.Suica.launchExternalBrowser(e),r.log("LaunchExternalBrowser is successful."),Promise.resolve(null)}catch(o){const t=c(o);return r.error(`LaunchExternalBrowser is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async closePaymentWebView(e){const i=l.CLOSE_PAYMENT_WEBVIEW;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{return await window.Suica.closePaymentWebView(e),r.log("ClosePaymentWebView is successful."),Promise.resolve(null)}catch(o){const t=c(o);return r.error(`ClosePaymentWebView is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async launchOtherWebView(e){const i=l.LAUNCH_OTHER_WEBVIEW;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{return await window.Suica.launchOtherWebView(e),r.log("LaunchOtherWebView is successful."),Promise.resolve(null)}catch(o){const t=c(o);return r.error(`LaunchOtherWebView is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async closeOtherWebView(){const e=l.CLOSE_OTHER_WEBVIEW;r.log(`Bridge Develop Empty Request, API Type: ${e}`);try{return await window.Suica.closeOtherWebView({}),r.log("CloseOtherWebView is successful."),Promise.resolve(null)}catch(i){const o=c(i);return r.error(`CloseOtherWebView is failure. error: ${i}, parsedError: ${this._toString(o)} .`),Promise.reject(o??n)}finally{r.log(`Bridge Develop Empty Request, API Type: ${e}, Finally .`)}}async getImageFromAlbumService(e){const i=l.GET_IMAGE_FROM_ALBUM;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{const o=await window.Suica.getImageFromAlbum(e),t=_(o);return t===null?(r.error(`GetImageFromAlbumService is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(r.log(`GetImageFromAlbumService is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return r.error(`GetImageFromAlbumService is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async finishInitialLoad(e){const i=l.FINISH_INITIAL_LOAD;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{return await window.Suica.finishInitialLoad(e),r.log("FinishInitialLoad is successful."),Promise.resolve(null)}catch(o){const t=c(o);return r.error(`FinishInitialLoad is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}async transitionPage(e){const i=l.TRANSITION_PAGE;r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}`);try{return await window.Suica.transitionPage(e),r.log("TransitionPage is successful."),Promise.resolve(null)}catch(o){const t=c(o);return r.error(`TransitionPage is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{r.log(`Bridge Develop Request: ${this._toString(e)}, API Type: ${i}, Finally .`)}}}export{y as BridgeManagerDevelop};
