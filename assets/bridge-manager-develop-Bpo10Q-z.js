import{b as e}from"./index-kSZj4veI.js";var E=(i=>(i[i.CB_RET_ERR_GENERAL=1]="CB_RET_ERR_GENERAL",i[i.CB_RET_ERR_BAD_LOGIN_INFO=2]="CB_RET_ERR_BAD_LOGIN_INFO",i[i.CB_RET_ERR_PARAM=3]="CB_RET_ERR_PARAM",i[i.CB_RET_ERR_MULTI_EXEC=4]="CB_RET_ERR_MULTI_EXEC",i[i.CB_RET_ERR_INOPERABLE=5]="CB_RET_ERR_INOPERABLE",i[i.CB_RET_ERR_KEY_NOT_EXIST=6]="CB_RET_ERR_KEY_NOT_EXIST",i[i.CB_RET_ERR_BIZPICO=20]="CB_RET_ERR_BIZPICO",i[i.CB_RET_ERR_NOT_AVAILABLE=80]="CB_RET_ERR_NOT_AVAILABLE",i[i.CB_RET_ERR_USER_CANCEL=90]="CB_RET_ERR_USER_CANCEL",i[i.CB_RET_ERR_SYSTEM_CANCEL=99]="CB_RET_ERR_SYSTEM_CANCEL",i))(E||{});function R(i){try{const r=Object.values(E).find(s=>s===i);return r!==void 0?r:null}catch(r){return e.error(`Get Bridge Response Error Type is Error. ForErrorCode: ${i}`,r),null}}function d(i){if(i===null)return null;switch(i){case 1:return"一般エラー";case 2:return"ログイン情報不正";case 3:return"パラメータ不正";case 4:return"多重実行";case 5:return"操作不可";case 6:return"指定したKEYが存在しない";case 20:return"BIZPICO APIで失敗";case 80:return"利用不可";case 90:return"ユーザーキャンセル";case 99:return"システムキャンセル"}}const n={errorCode:-1,errorDescription:"予期せぬエラー",errorType:null};function S(i){if(i==null||typeof i!="object")return null;try{return i}catch{return null}}function g(i){if(i==null||typeof i!="object")return e.log("ParseBridgeSuccessResponse. Object is empty."),null;try{const r=i;return e.log("ParseBridgeSuccessResponse is done."),r}catch(r){return e.log(`ParseBridgeSuccessResponse is unexpected. Error: ${r} .`),null}}function c(i){if(i==null||typeof i!="object")return e.log("ParseBridgeFailureError. Object is Empty."),null;try{const r=i;if(r!==null&&typeof r=="object"&&r.errorCode!==null&&r.errorCode!==void 0){const s=R(r.errorCode),o=d(s),t={...r,errorType:s,errorDescription:o};return e.log("ParseBridgeFailureError is done."),t}return e.error("ParseBridgeFailureError. Error Code is empty."),null}catch(r){return e.error(`ParseBridgeFailureError is unexpected. Error: ${r} .`),null}}var l=(i=>(i.GET_INFORMATION="getInformation",i.GET_ONE_TIME_CODE="getOneTimeCode",i.READ_MY_NUMBER="readMyNumber",i.CANCEL_READING_MY_NUMBER="cancelReadingMyNumber",i.SET_SCREEN_BRIGHTNESS="setScreenBrightness",i.GET_SCREEN_BRIGHTNESS="getScreenBrightness",i.REGIST_DISPLAY_STATUS_NOTIFICATION="registDisplayStatusNotification",i.SCAN_QR_CODE="scanQRCode",i.CONFIRM_QR_CODE="confirmQRCode",i.PLAY_PAYMENT_SOUND="playPaymentSound",i.SET_STORAGE_DATA="setStorageData",i.GET_STORAGE_DATA="getStorageData",i.REMOVE_STORAGE_DATA="removeStorageData",i.LAUNCH_EXTERNAL_BROWSER="launchExternalBrowser",i.CLOSE_PAYMENT_WEBVIEW="closePaymentWebView",i.LAUNCH_OTHER_WEBVIEW="launchOtherWebView",i.CLOSE_OTHER_WEBVIEW="closeOtherWebView",i.GET_IMAGE_FROM_ALBUM="getImageFromAlbum",i.FINISH_INITIAL_LOAD="finishInitialLoad",i.TRANSITION_PAGE="transitionPage",i))(l||{});class y{_toString(r){try{return JSON.stringify(r)}catch{return r}}get environment(){return"DEV"}async getInformation(r){const s=l.GET_INFORMATION;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{const o=await window.Suica.getInformation(r),t=g(o);return t===null?(e.error(`GetInformation is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(e.log(`GetInformation is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return e.error(`GetInformation is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async getOneTimeCode(r){const s=l.GET_ONE_TIME_CODE;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{const o=await window.Suica.getOneTimeCode(r),t=g(o);return t===null?(e.error(`GetOneTimeCode is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(e.log(`GetOneTimeCode is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return e.error(`GetOneTimeCode is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async readMyNumber(r,s){const o=l.READ_MY_NUMBER;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${o}`);const t=u=>{const a=S(u);a===null?e.error("ReadMyNumber#onStateChangedReadMyNumber Invalid Progress Data."):(e.log(`ReadMyNumber#onStateChangedReadMyNumber is parsed. parsedStatus: ${this._toString(a)}`),s(a))};try{const u=await window.Suica.readMyNumber({loginInfo:r.loginInfo,password:r.password,onStateChangedReadMyNumber:t}),a=g(u);return a===null?(e.error(`ReadMyNumber is unexpected. result: ${this._toString(a)}, resultJsonObject: ${this._toString(u)} .`),Promise.reject(n)):(e.log(`ReadMyNumber is successful. result: ${this._toString(a)}`),Promise.resolve(a))}catch(u){const a=c(u);return e.error(`ReadMyNumber is failure. error: ${u}, parsedError: ${this._toString(a)} .`),Promise.reject(a??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${o}, Finally .`)}}async cancelReadingMyNumber(r){const s=l.CANCEL_READING_MY_NUMBER;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{return await window.Suica.cancelReadingMyNumber(r),e.log("CancelReadingMyNumber is successful."),Promise.resolve(null)}catch(o){const t=c(o);return e.error(`CancelReadingMyNumber is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async setScreenBrightness(r){const s=l.SET_SCREEN_BRIGHTNESS;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{return await window.Suica.setScreenBrightness(r),e.log("SetScreenBrightness is successful."),Promise.resolve(null)}catch(o){const t=c(o);return e.error(`SetScreenBrightness is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async getScreenBrightness(r){const s=l.GET_SCREEN_BRIGHTNESS;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{const o=await window.Suica.getScreenBrightness(r),t=g(o);return t===null?(e.error(`GetScreenBrightness is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(e.log(`GetScreenBrightness is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return e.error(`GetScreenBrightness is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async registDisplayStatusNotification(r,s){const o=l.REGIST_DISPLAY_STATUS_NOTIFICATION;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${o}`);const t=u=>{const a=S(u);a===null?e.error("RegistDisplayStatusNotification#onNotifyDisplayStatus Invalid Status Data."):(e.log(`RegistDisplayStatusNotification#onNotifyDisplayStatus is parsed. parsedStatus: ${this._toString(a)}`),s==null||s(a))};try{return await window.Suica.registDisplayStatusNotification({loginInfo:r.loginInfo,onNotifyDisplayStatus:s===null?null:t}),e.log("RegistDisplayStatusNotification is successful."),Promise.resolve(null)}catch(u){const a=c(u);return e.error(`RegistDisplayStatusNotification is failure. error: ${u}, parsedError: ${this._toString(a)} .`),Promise.reject(a??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${o}, Finally .`)}}async scanQRCode(r){const s=l.SCAN_QR_CODE;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{const o=await window.Suica.scanQRCode(r),t=g(o);return t===null?(e.error(`ScanQRCode is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(e.log(`ScanQRCode is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return e.error(`ScanQRCode is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}confirmQRCode(r){const s=l.CONFIRM_QR_CODE;e.log(`Bridge Develop API Type: ${s}`);const o=t=>{const u=(()=>{try{const _=t;return _.value!==null&&_.value!==void 0&&_.type!==null&&_.type!==void 0?_:null}catch(_){return e.error(`ConfirmQRCode#codeDataFromNative is unexpected. error: ${_}, data: ${this._toString(t)} .`),null}})();if(u===null)return e.error(`ConfirmQRCode#codeDataFromNative is null. Because invalid data. data: ${this._toString(t)} .`),Promise.reject();const a=r(u);return e.log(`ConfirmQRCode#Callback. result is ${this._toString(a)}, data: ${this._toString(t)} .`),Promise.resolve(a)};window.Suica.confirmQRCode({onConfirm:o}),e.log(`Bridge Develop, API Type: ${s}, End .`)}playPaymentSound(r){const s=l.PLAY_PAYMENT_SOUND;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`),window.Suica.playPaymentSound(r),e.log(`Bridge Develop, API Type: ${s}, End .`)}async setStorageData(r){const s=l.SET_STORAGE_DATA;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{return await window.Suica.setStorageData(r),e.log("SetStorageData is successful."),Promise.resolve(null)}catch(o){const t=c(o);return e.error(`SetStorageData is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async getStorageData(r){const s=l.GET_STORAGE_DATA;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{const o=await window.Suica.getStorageData(r),t=g(o);return t===null?(e.error(`GetStorageData is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(e.log(`GetStorageData is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return e.error(`GetStorageData is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async removeStorageData(r){const s=l.REMOVE_STORAGE_DATA;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{return await window.Suica.removeStorageData(r),e.log("RemoveStorageData is successful."),Promise.resolve(null)}catch(o){const t=c(o);return e.error(`RemoveStorageData is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async launchExternalBrowser(r){const s=l.LAUNCH_EXTERNAL_BROWSER;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{return await window.Suica.launchExternalBrowser(r),e.log("LaunchExternalBrowser is successful."),Promise.resolve(null)}catch(o){const t=c(o);return e.error(`LaunchExternalBrowser is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async closePaymentWebView(r){const s=l.CLOSE_PAYMENT_WEBVIEW;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{return await window.Suica.closePaymentWebView(r),e.log("ClosePaymentWebView is successful."),Promise.resolve(null)}catch(o){const t=c(o);return e.error(`ClosePaymentWebView is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async launchOtherWebView(r){const s=l.LAUNCH_OTHER_WEBVIEW;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{return await window.Suica.launchOtherWebView(r),e.log("LaunchOtherWebView is successful."),Promise.resolve(null)}catch(o){const t=c(o);return e.error(`LaunchOtherWebView is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async closeOtherWebView(){const r=l.CLOSE_OTHER_WEBVIEW;e.log(`Bridge Develop Empty Request, API Type: ${r}`);try{return await window.Suica.closeOtherWebView({}),e.log("CloseOtherWebView is successful."),Promise.resolve(null)}catch(s){const o=c(s);return e.error(`CloseOtherWebView is failure. error: ${s}, parsedError: ${this._toString(o)} .`),Promise.reject(o??n)}finally{e.log(`Bridge Develop Empty Request, API Type: ${r}, Finally .`)}}async getImageFromAlbumService(r){const s=l.GET_IMAGE_FROM_ALBUM;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{const o=await window.Suica.getImageFromAlbum(r),t=g(o);return t===null?(e.error(`GetImageFromAlbumService is unexpected. result: ${this._toString(t)}, resultJsonObject: ${this._toString(o)} .`),Promise.reject(n)):(e.log(`GetImageFromAlbumService is successful. result: ${this._toString(t)}`),Promise.resolve(t))}catch(o){const t=c(o);return e.error(`GetImageFromAlbumService is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async finishInitialLoad(r){const s=l.FINISH_INITIAL_LOAD;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{return await window.Suica.finishInitialLoad(r),e.log("FinishInitialLoad is successful."),Promise.resolve(null)}catch(o){const t=c(o);return e.error(`FinishInitialLoad is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}async transitionPage(r){const s=l.TRANSITION_PAGE;e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}`);try{return await window.Suica.transitionPage(r),e.log("TransitionPage is successful."),Promise.resolve(null)}catch(o){const t=c(o);return e.error(`TransitionPage is failure. error: ${o}, parsedError: ${this._toString(t)} .`),Promise.reject(t??n)}finally{e.log(`Bridge Develop Request: ${this._toString(r)}, API Type: ${s}, Finally .`)}}}export{y as BridgeManagerDevelop};
